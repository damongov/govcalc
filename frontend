import React, { useState } from 'react';
import { Book, Calculator } from 'lucide-react';

const BookIcon = ({ type }) => {
  const getBookStyle = (type) => {
    switch(type) {
      case 'Strength':
        return {
          bg: 'linear-gradient(135deg, #8B4513 0%, #D2691E  50%, #CD853F 100%)',
          symbol: 'üí™',
          symbolColor: '#FFD700'
        };
      case 'Allure':
        return {
          bg: 'linear-gradient(135deg, #4B0082 0%, #8A2BE2 50%, #9370DB 100%)',
          symbol: 'üí´',
          symbolColor: '#FFD700'
        };
      case 'Intellect':
        return {
          bg: 'linear-gradient(135deg, #228B22 0%, #32CD32 50%, #98FB98 100%)',
          symbol: 'üìñ',
          symbolColor: '#FFD700'
        };
      case 'Spirit':
        return {
          bg: 'linear-gradient(135deg, #1E90FF 0%, #4169E1 50%, #87CEEB 100%)',
          symbol: 'üëÅ',
          symbolColor: '#FFD700'
        };
      case 'Random':
        return {
          bg: 'linear-gradient(135deg, #2F4F4F 0%, #696969 50%, #A9A9A9 100%)',
          symbol: '‚ùì',
          symbolColor: '#FFD700'
        };
      default:
        return {
          bg: '#666',
          symbol: 'üìò',
          symbolColor: '#FFD700'
        };
    }
  };

  const style = getBookStyle(type);

  return (
    <div className="relative w-5 h-6 transform hover:scale-110 transition-transform">
      <div 
        className="absolute inset-0 rounded-sm shadow-lg border border-black/30"
        style={{ background: style.bg }}
      >
        <div className="absolute top-0.5 left-0.5 right-0.5 h-0.5 bg-black/20 rounded-full"></div>
        <div className="absolute bottom-0.5 left-0.5 right-0.5 h-0.5 bg-black/20 rounded-full"></div>
        
        <div className="absolute inset-0 flex items-center justify-center">
          <span 
            className="text-xs leading-none"
            style={{ color: style.symbolColor, textShadow: '0 1px 2px rgba(0,0,0,0.8)' }}
          >
            {style.symbol}
          </span>
        </div>
        
        <div className="absolute right-0 top-0.5 bottom-0.5 w-0.5 bg-white/80 rounded-r-sm"></div>
      </div>
    </div>
  );
};

const DominanceCalculator = () => {
  const [sections, setSections] = useState({
    section5000: {
      title: "5,000 Section",
      value: 5000,
      books: { Random: 0, Strength: 0, Allure: 0, Intellect: 0, Spirit: 0 }
    },
    section1000: {
      title: "1,000 Section",
      value: 1000,
      books: { Random: 0, Strength: 0, Allure: 0, Intellect: 0, Spirit: 0 }
    },
    section400: {
      title: "400 Section",
      value: 400,
      books: { Random: 0, Strength: 0, Allure: 0, Intellect: 0, Spirit: 0 }
    },
    section100: {
      title: "100 Section",
      value: 100,
      books: { Random: 0, Strength: 0, Allure: 0, Intellect: 0, Spirit: 0 }
    }
  });

  const [wardenAuras, setWardenAuras] = useState({
    // Wild Hunt
    rudra_talent: 0,
    rudra_books: 0,
    woden_talent: 0,
    woden_books: 0,
    artemis_talent: 0,
    artemis_books: 0,
    finn_talent: 0,
    finn_books: 0,
    
    // Monster Noir
    eddie_talent: 0,
    eddie_books: 0,
    scarlet_talent: 0,
    scarlet_books: 0,
    sam_talent: 0,
    sam_books: 0,
    grendel_talent: 0,
    grendel_books: 0,
    
    // Bloody Tyrants
    cesare_talent: 0,
    cesare_books: 0,
    max_talent: 0,
    max_books: 0,
    erzsebet_talent: 0,
    erzsebet_books: 0,
    ivan_talent: 0,
    ivan_books: 0,
    maria_talent: 0,
    maria_books: 0,
    
    // Misc Wardens
    dracula_talent: 0,
    dracula_books: 0,
    nyx_talent: 0,
    nyx_books: 0,
    frederick_talent: 0,
    frederick_books: 0,
    victor_talent: 0,
    
    // VIP Wardens
    tomas_talent: 0,
    cleo_talent: 0,
    aurelia_talent: 0,
    william_talent: 0,
    poe_talent: 0,
    poe_books: 0,
    damian_talent: 0,
    damian_books: 0,
    vance_talent: 0,
    vance_books: 0,
    diana_talent: 0,
    diana_books: 0
  });

  const [totalDominance, setTotalDominance] = useState(0);

  const bookTypes = [
    { name: 'Random', color: 'bg-gray-500', icon: 'üé≤' },
    { name: 'Strength', color: 'bg-red-500', icon: 'üí™' },
    { name: 'Allure', color: 'bg-purple-500', icon: 'üí´' },
    { name: 'Intellect', color: 'bg-blue-500', icon: 'üß†' },
    { name: 'Spirit', color: 'bg-green-500', icon: '‚ú®' }
  ];

  const updateBookCount = (sectionKey, bookType, value) => {
    const numValue = parseInt(value) || 0;
    setSections(prev => ({
      ...prev,
      [sectionKey]: {
        ...prev[sectionKey],
        books: {
          ...prev[sectionKey].books,
          [bookType]: Math.max(0, numValue)
        }
      }
    }));
  };

  const updateAura = (auraKey, value) => {
    const numValue = parseFloat(value) || 0;
    setWardenAuras(prev => ({
      ...prev,
      [auraKey]: Math.max(0, numValue)
    }));
  };

  const calculateDominance = () => {
    let total = 0;
    
    Object.values(sections).forEach(section => {
      Object.entries(section.books).forEach(([bookType, count]) => {
        if (count > 0) {
          let multiplier = 1;
          
          // Apply attribute-specific bonuses
          switch(bookType) {
            case 'Strength':
              // Wild Hunt - Rudra
              multiplier *= (1 + wardenAuras.rudra_talent / 100);
              multiplier *= (1 + wardenAuras.rudra_books / 100);
              // Monster Noir - Eddie
              multiplier *= (1 + wardenAuras.eddie_talent / 100);
              multiplier *= (1 + wardenAuras.eddie_books / 100);
              // Bloody Tyrants - Cesare (Str/Int)
              multiplier *= (1 + wardenAuras.cesare_talent / 100);
              multiplier *= (1 + wardenAuras.cesare_books / 100);
              // Bloody Tyrants - Max (Str/Spr)
              multiplier *= (1 + wardenAuras.max_talent / 100);
              multiplier *= (1 + wardenAuras.max_books / 100);
              // Misc - Victor
              multiplier *= (1 + wardenAuras.victor_talent / 100);
              // VIP - Tomas (Str/Int)
              multiplier *= (1 + wardenAuras.tomas_talent / 100);
              // VIP - Aurelia (Str/Spr)
              multiplier *= (1 + wardenAuras.aurelia_talent / 100);
              break;
              
            case 'Allure':
              // Wild Hunt - Woden
              multiplier *= (1 + wardenAuras.woden_talent / 100);
              multiplier *= (1 + wardenAuras.woden_books / 100);
              // Monster Noir - Scarlet
              multiplier *= (1 + wardenAuras.scarlet_talent / 100);
              multiplier *= (1 + wardenAuras.scarlet_books / 100);
              // Bloody Tyrants - Erzsebet (All/Int)
              multiplier *= (1 + wardenAuras.erzsebet_talent / 100);
              multiplier *= (1 + wardenAuras.erzsebet_books / 100);
              // Bloody Tyrants - Ivan (All/Spr)
              multiplier *= (1 + wardenAuras.ivan_talent / 100);
              multiplier *= (1 + wardenAuras.ivan_books / 100);
              // Misc - Frederick
              multiplier *= (1 + wardenAuras.frederick_talent / 100);
              multiplier *= (1 + wardenAuras.frederick_books / 100);
              // VIP - Cleo (All/Spr)
              multiplier *= (1 + wardenAuras.cleo_talent / 100);
              // VIP - William (All/Int)
              multiplier *= (1 + wardenAuras.william_talent / 100);
              break;
              
            case 'Intellect':
              // Wild Hunt - Artemis
              multiplier *= (1 + wardenAuras.artemis_talent / 100);
              multiplier *= (1 + wardenAuras.artemis_books / 100);
              // Monster Noir - Sam
              multiplier *= (1 + wardenAuras.sam_talent / 100);
              multiplier *= (1 + wardenAuras.sam_books / 100);
              // Bloody Tyrants - Cesare (Str/Int)
              multiplier *= (1 + wardenAuras.cesare_talent / 100);
              multiplier *= (1 + wardenAuras.cesare_books / 100);
              // Bloody Tyrants - Erzsebet (All/Int)
              multiplier *= (1 + wardenAuras.erzsebet_talent / 100);
              multiplier *= (1 + wardenAuras.erzsebet_books / 100);
              // VIP - Tomas (Str/Int)
              multiplier *= (1 + wardenAuras.tomas_talent / 100);
              // VIP - William (All/Int)
              multiplier *= (1 + wardenAuras.william_talent / 100);
              break;
              
            case 'Spirit':
              // Wild Hunt - Finn
              multiplier *= (1 + wardenAuras.finn_talent / 100);
              multiplier *= (1 + wardenAuras.finn_books / 100);
              // Monster Noir - Grendel
              multiplier *= (1 + wardenAuras.grendel_talent / 100);
              multiplier *= (1 + wardenAuras.grendel_books / 100);
              // Bloody Tyrants - Max (Str/Spr)
              multiplier *= (1 + wardenAuras.max_talent / 100);
              multiplier *= (1 + wardenAuras.max_books / 100);
              // Bloody Tyrants - Ivan (All/Spr)
              multiplier *= (1 + wardenAuras.ivan_talent / 100);
              multiplier *= (1 + wardenAuras.ivan_books / 100);
              // VIP - Cleo (All/Spr)
              multiplier *= (1 + wardenAuras.cleo_talent / 100);
              // VIP - Aurelia (Str/Spr)
              multiplier *= (1 + wardenAuras.aurelia_talent / 100);
              break;
          }
          
          // Apply all-attribute bonuses to all book types including Random
          // Bloody Tyrants - Maria
          multiplier *= (1 + wardenAuras.maria_talent / 100);
          multiplier *= (1 + wardenAuras.maria_books / 100);
          // Misc - Dracula
          multiplier *= (1 + wardenAuras.dracula_talent / 100);
          multiplier *= (1 + wardenAuras.dracula_books / 100);
          // Misc - Nyx
          multiplier *= (1 + wardenAuras.nyx_talent / 100);
          multiplier *= (1 + wardenAuras.nyx_books / 100);
          // VIP - Poe
          multiplier *= (1 + wardenAuras.poe_talent / 100);
          multiplier *= (1 + wardenAuras.poe_books / 100);
          // VIP - Damian
          multiplier *= (1 + wardenAuras.damian_talent / 100);
          multiplier *= (1 + wardenAuras.damian_books / 100);
          // VIP - Van
