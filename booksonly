import React, { useState } from 'react';
import { Book, Plus, Minus, Calculator } from 'lucide-react';

const BookIcon = ({ type }) => {
  const getBookStyle = (type) => {
    switch(type) {
      case 'Strength':
        return {
          bg: 'linear-gradient(135deg, #8B4513 0%, #D2691E  50%, #CD853F 100%)',
          symbol: 'üí™',
          symbolColor: '#FFD700'
        };
      case 'Allure':
        return {
          bg: 'linear-gradient(135deg, #4B0082 0%, #8A2BE2 50%, #9370DB 100%)',
          symbol: 'üí´',
          symbolColor: '#FFD700'
        };
      case 'Intellect':
        return {
          bg: 'linear-gradient(135deg, #228B22 0%, #32CD32 50%, #98FB98 100%)',
          symbol: 'üìñ',
          symbolColor: '#FFD700'
        };
      case 'Spirit':
        return {
          bg: 'linear-gradient(135deg, #1E90FF 0%, #4169E1 50%, #87CEEB 100%)',
          symbol: 'üëÅÔ∏è',
          symbolColor: '#FFD700'
        };
      case 'Random':
        return {
          bg: 'linear-gradient(135deg, #2F4F4F 0%, #696969 50%, #A9A9A9 100%)',
          symbol: '‚ùì',
          symbolColor: '#FFD700'
        };
      default:
        return {
          bg: '#666',
          symbol: 'üìò',
          symbolColor: '#FFD700'
        };
    }
  };

  const style = getBookStyle(type);

  return (
    <div className="relative w-6 h-7 transform hover:scale-110 transition-transform">
      {/* Book spine */}
      <div 
        className="absolute inset-0 rounded-sm shadow-lg border border-black/30"
        style={{ background: style.bg }}
      >
        {/* Book binding details */}
        <div className="absolute top-1 left-0.5 right-0.5 h-0.5 bg-black/20 rounded-full"></div>
        <div className="absolute bottom-1 left-0.5 right-0.5 h-0.5 bg-black/20 rounded-full"></div>
        
        {/* Center symbol */}
        <div className="absolute inset-0 flex items-center justify-center">
          <span 
            className="text-xs leading-none"
            style={{ color: style.symbolColor, textShadow: '0 1px 2px rgba(0,0,0,0.8)' }}
          >
            {style.symbol}
          </span>
        </div>
        
        {/* Book pages effect */}
        <div className="absolute right-0 top-0.5 bottom-0.5 w-0.5 bg-white/80 rounded-r-sm"></div>
      </div>
    </div>
  );
};

const DominanceCalculator = () => {
  const [sections, setSections] = useState({
    section5000: {
      title: "5,000 Section",
      value: 5000,
      books: { Random: 0, Strength: 0, Allure: 0, Intellect: 0, Spirit: 0 }
    },
    section1000: {
      title: "1,000 Section",
      value: 1000,
      books: { Random: 0, Strength: 0, Allure: 0, Intellect: 0, Spirit: 0 }
    },
    section400: {
      title: "400 Section",
      value: 400,
      books: { Random: 0, Strength: 0, Allure: 0, Intellect: 0, Spirit: 0 }
    },
    section100: {
      title: "100 Section",
      value: 100,
      books: { Random: 0, Strength: 0, Allure: 0, Intellect: 0, Spirit: 0 }
    }
  });

  const [totalDominance, setTotalDominance] = useState(0);

  const bookTypes = [
    { name: 'Random', color: 'bg-gray-500', icon: 'üé≤' },
    { name: 'Strength', color: 'bg-red-500', icon: 'üí™' },
    { name: 'Allure', color: 'bg-purple-500', icon: 'üí´' },
    { name: 'Intellect', color: 'bg-blue-500', icon: 'üß†' },
    { name: 'Spirit', color: 'bg-green-500', icon: '‚ú®' }
  ];

  const updateBookCount = (sectionKey, bookType, value) => {
    const numValue = parseInt(value) || 0;
    setSections(prev => ({
      ...prev,
      [sectionKey]: {
        ...prev[sectionKey],
        books: {
          ...prev[sectionKey].books,
          [bookType]: Math.max(0, numValue)
        }
      }
    }));
  };

  const calculateDominance = () => {
    let total = 0;
    Object.values(sections).forEach(section => {
      const sectionBookCount = Object.values(section.books).reduce((sum, count) => sum + count, 0);
      total += sectionBookCount * section.value;
    });
    setTotalDominance(total);
  };

  const resetAll = () => {
    setSections(prev => {
      const reset = { ...prev };
      Object.keys(reset).forEach(key => {
        reset[key].books = { Random: 0, Strength: 0, Allure: 0, Intellect: 0, Spirit: 0 };
      });
      return reset;
    });
    setTotalDominance(0);
  };

  const getSectionTotal = (section) => {
    return Object.values(section.books).reduce((sum, count) => sum + count, 0);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 p-6">
      <div className="max-w-7xl mx-auto">
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-white mb-2 flex items-center justify-center gap-3">
            <Book className="text-purple-400" />
            Dominance Calculator
          </h1>
          <p className="text-purple-200">Track your books across sections and calculate total dominance</p>
        </div>

        <div className="bg-white/10 backdrop-blur-lg rounded-2xl p-8 border border-white/20 shadow-2xl mb-8">
          <div className="flex flex-col sm:flex-row gap-4 justify-center items-center mb-6">
            <button
              onClick={calculateDominance}
              className="bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white px-8 py-3 rounded-lg flex items-center gap-2 font-semibold transition-all transform hover:scale-105"
            >
              <Calculator size={20} />
              Calculate Total Dominance
            </button>
            
            <button
              onClick={resetAll}
              className="bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg font-semibold transition-colors"
            >
              Reset All
            </button>
          </div>

          <div className="text-center">
            <div className="bg-gradient-to-r from-yellow-400/20 to-orange-400/20 border border-yellow-400/30 rounded-xl p-6">
              <h2 className="text-3xl font-bold text-yellow-300 mb-2">Total Dominance</h2>
              <div className="text-6xl font-bold text-white mb-4">
                {totalDominance.toLocaleString()}
              </div>
              
              <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 mt-6">
                {Object.entries(sections).map(([sectionKey, section]) => (
                  <div key={sectionKey} className="bg-white/10 rounded-lg p-3">
                    <div className="text-sm text-yellow-200">{section.title}</div>
                    <div className="text-lg font-bold text-white">
                      {(getSectionTotal(section) * section.value).toLocaleString()}
                    </div>
                    <div className="text-xs text-gray-300">{getSectionTotal(section)} books</div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-4 gap-4">
          {Object.entries(sections).map(([sectionKey, section]) => (
            <div key={sectionKey} className="bg-white/10 backdrop-blur-lg rounded-xl p-3 border border-white/20 shadow-2xl">
              <div className="text-center mb-3">
                <h2 className="text-sm font-bold text-white">{section.title}</h2>
                <div className="text-xs text-purple-200">Per book</div>
                <div className="text-sm font-bold text-purple-300">{section.value.toLocaleString()}</div>
              </div>

              <div className="grid grid-cols-2 gap-2 mb-3">
                {bookTypes.map((bookType) => (
                  <div key={bookType.name} className="bg-white/5 rounded-lg p-2 border border-white/10">
                    <div className="flex flex-col items-center gap-1">
                      <div className="relative w-5 h-6">
                        <BookIcon type={bookType.name} />
                      </div>
                      <h3 className="text-white font-medium text-xs text-center">{bookType.name}</h3>
                      
                      <input
                        type="number"
                        min="0"
                        value={section.books[bookType.name]}
                        onChange={(e) => updateBookCount(sectionKey, bookType.name, e.target.value)}
                        className="w-full bg-white/10 text-white text-center text-sm font-bold px-1 py-1 rounded border border-white/20 focus:border-purple-400 focus:outline-none focus:ring-1 focus:ring-purple-400/50"
                        placeholder="0"
                      />
                    </div>
                  </div>
                ))}
              </div>

              <div className="bg-white/5 rounded-lg p-2 border border-white/10">
                <div className="text-center">
                  <div className="text-xs text-gray-300">
                    {getSectionTotal(section)} books
                  </div>
                  <div className="text-sm font-bold text-white">
                    {(getSectionTotal(section) * section.value).toLocaleString()}
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
};

export default DominanceCalculator;
